on:
  release:
    types: [published]
    
name: Create RaspberryPi Release
jobs:
  pi-gen:
    runs-on: ubuntu-latest
    steps:
      - run: |
          mkdir -p custom-stage/package &&
          {
          cat > custom-stage/package/00-run-chroot.sh <<-'EOF'
          #!/bin/bash
          apt-get install -y curl git docker.io docker-compose cmus code qemu-system
          USERNAME=desktop
          useradd $USERNAME
          sudo mkdir /home/$USERNAME
          sudo chown $USERNAME:$USERNAME /home/$USERNAME
          su - ${FIRST_USER_NAME} -c 'curl https://get.volta.sh | bash'
          su - ${FIRST_USER_NAME} -c 'curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y'
          su - ${FIRST_USER_NAME} -c 'curl -fsSL https://astro.build/uv/install.sh | sh'
          GO_VERSION=1.22.0
          wget https://golang.org/dl/go${GO_VERSION}.linux-arm64.tar.gz
          tar -C /usr/local -xzf go${GO_VERSION}.linux-arm64.tar.gz
          echo 'export PATH=/usr/local/go/bin:$PATH' >> /etc/profile
          rm go${GO_VERSION}.linux-arm64.tar.gz
          # cloudflare
          wget https://github.com/cloudflare/cloudflared/releases/download/2025.2.1/cloudflared-linux-arm64
          mv cloudflared-linux-arm64 /usr/local/bin
          # quich-ssh
          wget https://github.com/oowl/quicssh-rs/releases/download/v0.1.5/quicssh-Linux-aarch64-musl.tar.gz
          tar -C /usr/local/bin -xzf quicssh-Linux-aarch64-musl.tar.gz
          rm quicssh-Linux-aarch64-musl.tar.gz
          cat > /etc/systemd/system/quicssh.service << eot
          [Unit]
          Description=QUIC SSH Server
          After=network.target
          
          [Service]
          ExecStart=/usr/local/bin/quicssh-rs server --listen 0.0.0.0:22333
          Restart=always
          Environment="LOG_FILE=/var/log/quicssh.log"
          Environment="LOG_LEVEL=error"
          
          # Security Hardening
          NoNewPrivileges=true
          ProtectSystem=full
          ProtectHome=true
          PrivateTmp=true
          
          [Install]
          WantedBy=multi-user.target
          eot
          systemctl enable quicssh.service
          EOF
          } &&
          chmod +x custom-stage/package/00-run-chroot.sh &&
          {
          cat > custom-stage/prerun.sh <<-EOF
          #!/bin/bash -e
          if [ ! -d "\${ROOTFS_DIR}" ]; then
            copy_previous
          fi
          EOF
          } &&
          chmod +x custom-stage/prerun.sh

      - uses: usimd/pi-gen-action@v1
        id: build
        with:
          image-name: misogihagi-pi
          stage-list: stage0 stage1 stage2 ./custom-stage

      - run: |
          ls  ${{ steps.build.outputs.image-path }}

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path:  ${{ steps.build.outputs.image-path }}
          asset_name: misogihagi-raspberry-pi.zip
          asset_content_type: application/zip
